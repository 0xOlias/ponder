/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface SeedScriptInterface extends utils.Interface {
  functions: {
    "IS_SCRIPT()": FunctionFragment;
    "alice()": FunctionFragment;
    "bob()": FunctionFragment;
    "charlie()": FunctionFragment;
    "config()": FunctionFragment;
    "deployer()": FunctionFragment;
    "ethPlays()": FunctionFragment;
    "poke()": FunctionFragment;
    "registerAccounts()": FunctionFragment;
    "registryReceiver()": FunctionFragment;
    "run()": FunctionFragment;
    "setUp()": FunctionFragment;
    "vm()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "IS_SCRIPT"
      | "alice"
      | "bob"
      | "charlie"
      | "config"
      | "deployer"
      | "ethPlays"
      | "poke"
      | "registerAccounts"
      | "registryReceiver"
      | "run"
      | "setUp"
      | "vm"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "IS_SCRIPT", values?: undefined): string;
  encodeFunctionData(functionFragment: "alice", values?: undefined): string;
  encodeFunctionData(functionFragment: "bob", values?: undefined): string;
  encodeFunctionData(functionFragment: "charlie", values?: undefined): string;
  encodeFunctionData(functionFragment: "config", values?: undefined): string;
  encodeFunctionData(functionFragment: "deployer", values?: undefined): string;
  encodeFunctionData(functionFragment: "ethPlays", values?: undefined): string;
  encodeFunctionData(functionFragment: "poke", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAccounts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registryReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "run", values?: undefined): string;
  encodeFunctionData(functionFragment: "setUp", values?: undefined): string;
  encodeFunctionData(functionFragment: "vm", values?: undefined): string;

  decodeFunctionResult(functionFragment: "IS_SCRIPT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "alice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "charlie", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "config", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deployer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ethPlays", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registryReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "run", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vm", data: BytesLike): Result;

  events: {};
}

export interface SeedScript extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeedScriptInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<[boolean]>;

    alice(overrides?: CallOverrides): Promise<[string]>;

    bob(overrides?: CallOverrides): Promise<[string]>;

    charlie(overrides?: CallOverrides): Promise<[string]>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isActive: boolean;
        alignmentDecayRate: BigNumber;
        alignmentVoteCooldown: BigNumber;
        chaosVoteReward: BigNumber;
        orderDuration: BigNumber;
        chaosInputRewardCooldown: BigNumber;
        chaosInputReward: BigNumber;
        orderInputReward: BigNumber;
        chatCost: BigNumber;
        rareCandyCost: BigNumber;
        controlAuctionDuration: BigNumber;
        controlDuration: BigNumber;
      }
    >;

    deployer(overrides?: CallOverrides): Promise<[string]>;

    ethPlays(overrides?: CallOverrides): Promise<[string]>;

    poke(overrides?: CallOverrides): Promise<[string]>;

    registerAccounts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registryReceiver(overrides?: CallOverrides): Promise<[string]>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vm(overrides?: CallOverrides): Promise<[string]>;
  };

  IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

  alice(overrides?: CallOverrides): Promise<string>;

  bob(overrides?: CallOverrides): Promise<string>;

  charlie(overrides?: CallOverrides): Promise<string>;

  config(
    overrides?: CallOverrides
  ): Promise<
    [
      boolean,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      isActive: boolean;
      alignmentDecayRate: BigNumber;
      alignmentVoteCooldown: BigNumber;
      chaosVoteReward: BigNumber;
      orderDuration: BigNumber;
      chaosInputRewardCooldown: BigNumber;
      chaosInputReward: BigNumber;
      orderInputReward: BigNumber;
      chatCost: BigNumber;
      rareCandyCost: BigNumber;
      controlAuctionDuration: BigNumber;
      controlDuration: BigNumber;
    }
  >;

  deployer(overrides?: CallOverrides): Promise<string>;

  ethPlays(overrides?: CallOverrides): Promise<string>;

  poke(overrides?: CallOverrides): Promise<string>;

  registerAccounts(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registryReceiver(overrides?: CallOverrides): Promise<string>;

  run(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vm(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<boolean>;

    alice(overrides?: CallOverrides): Promise<string>;

    bob(overrides?: CallOverrides): Promise<string>;

    charlie(overrides?: CallOverrides): Promise<string>;

    config(
      overrides?: CallOverrides
    ): Promise<
      [
        boolean,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        isActive: boolean;
        alignmentDecayRate: BigNumber;
        alignmentVoteCooldown: BigNumber;
        chaosVoteReward: BigNumber;
        orderDuration: BigNumber;
        chaosInputRewardCooldown: BigNumber;
        chaosInputReward: BigNumber;
        orderInputReward: BigNumber;
        chatCost: BigNumber;
        rareCandyCost: BigNumber;
        controlAuctionDuration: BigNumber;
        controlDuration: BigNumber;
      }
    >;

    deployer(overrides?: CallOverrides): Promise<string>;

    ethPlays(overrides?: CallOverrides): Promise<string>;

    poke(overrides?: CallOverrides): Promise<string>;

    registerAccounts(overrides?: CallOverrides): Promise<void>;

    registryReceiver(overrides?: CallOverrides): Promise<string>;

    run(overrides?: CallOverrides): Promise<void>;

    setUp(overrides?: CallOverrides): Promise<void>;

    vm(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<BigNumber>;

    alice(overrides?: CallOverrides): Promise<BigNumber>;

    bob(overrides?: CallOverrides): Promise<BigNumber>;

    charlie(overrides?: CallOverrides): Promise<BigNumber>;

    config(overrides?: CallOverrides): Promise<BigNumber>;

    deployer(overrides?: CallOverrides): Promise<BigNumber>;

    ethPlays(overrides?: CallOverrides): Promise<BigNumber>;

    poke(overrides?: CallOverrides): Promise<BigNumber>;

    registerAccounts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registryReceiver(overrides?: CallOverrides): Promise<BigNumber>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vm(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    IS_SCRIPT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    alice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bob(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    charlie(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    config(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deployer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ethPlays(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poke(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAccounts(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registryReceiver(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    run(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vm(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
