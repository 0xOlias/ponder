// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FeedItem extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save FeedItem entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeedItem must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeedItem", id.toString(), this);
    }
  }

  static load(id: string): FeedItem | null {
    return changetype<FeedItem | null>(store.get("FeedItem", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): i32 {
    let value = this.get("timestamp");
    return value!.toI32();
  }

  set timestamp(value: i32) {
    this.set("timestamp", Value.fromI32(value));
  }

  get feedIndex(): BigInt {
    let value = this.get("feedIndex");
    return value!.toBigInt();
  }

  set feedIndex(value: BigInt) {
    this.set("feedIndex", Value.fromBigInt(value));
  }

  get type(): string {
    let value = this.get("type");
    return value!.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value!.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get vote(): boolean {
    let value = this.get("vote");
    return value!.toBoolean();
  }

  set vote(value: boolean) {
    this.set("vote", Value.fromBoolean(value));
  }

  get inputIndex(): i32 {
    let value = this.get("inputIndex");
    return value!.toI32();
  }

  set inputIndex(value: i32) {
    this.set("inputIndex", Value.fromI32(value));
  }

  get buttonIndex(): i32 {
    let value = this.get("buttonIndex");
    return value!.toI32();
  }

  set buttonIndex(value: i32) {
    this.set("buttonIndex", Value.fromI32(value));
  }

  get message(): string | null {
    let value = this.get("message");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set message(value: string | null) {
    if (!value) {
      this.unset("message");
    } else {
      this.set("message", Value.fromString(<string>value));
    }
  }

  get count(): i32 {
    let value = this.get("count");
    return value!.toI32();
  }

  set count(value: i32) {
    this.set("count", Value.fromI32(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get account(): Bytes | null {
    let value = this.get("account");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set account(value: Bytes | null) {
    if (!value) {
      this.unset("account");
    } else {
      this.set("account", Value.fromBytes(<Bytes>value));
    }
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Player entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Player must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Player", id.toString(), this);
    }
  }

  static load(id: string): Player | null {
    return changetype<Player | null>(store.get("Player", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get account(): Bytes {
    let value = this.get("account");
    return value!.toBytes();
  }

  set account(value: Bytes) {
    this.set("account", Value.fromBytes(value));
  }

  get replacedAt(): i32 {
    let value = this.get("replacedAt");
    return value!.toI32();
  }

  set replacedAt(value: i32) {
    this.set("replacedAt", Value.fromI32(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value!.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get alignmentVoteTimestamp(): i32 {
    let value = this.get("alignmentVoteTimestamp");
    return value!.toI32();
  }

  set alignmentVoteTimestamp(value: i32) {
    this.set("alignmentVoteTimestamp", Value.fromI32(value));
  }

  get inputVoteIndex(): i32 {
    let value = this.get("inputVoteIndex");
    return value!.toI32();
  }

  set inputVoteIndex(value: i32) {
    this.set("inputVoteIndex", Value.fromI32(value));
  }

  get chaosInputTimestamp(): i32 {
    let value = this.get("chaosInputTimestamp");
    return value!.toI32();
  }

  set chaosInputTimestamp(value: i32) {
    this.set("chaosInputTimestamp", Value.fromI32(value));
  }

  get alignmentVoteCount(): i32 {
    let value = this.get("alignmentVoteCount");
    return value!.toI32();
  }

  set alignmentVoteCount(value: i32) {
    this.set("alignmentVoteCount", Value.fromI32(value));
  }

  get chatCount(): i32 {
    let value = this.get("chatCount");
    return value!.toI32();
  }

  set chatCount(value: i32) {
    this.set("chatCount", Value.fromI32(value));
  }

  get rareCandyCount(): i32 {
    let value = this.get("rareCandyCount");
    return value!.toI32();
  }

  set rareCandyCount(value: i32) {
    this.set("rareCandyCount", Value.fromI32(value));
  }

  get controlCount(): i32 {
    let value = this.get("controlCount");
    return value!.toI32();
  }

  set controlCount(value: i32) {
    this.set("controlCount", Value.fromI32(value));
  }
}
