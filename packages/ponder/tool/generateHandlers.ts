import { EventFragment, ParamType } from "@ethersproject/abi";
import { Contract } from "ethers";
import fs from "fs";

import { toolConfig } from "./config";
import type { PonderConfig } from "./getConfig";

const header = `
/* Autogenerated file. Do not edit manually. */
`;

const common = `
${header}
export { BigNumber } from 'ethers';
`;

const imports = `
${header}
import { BigNumber } from "./common";

type Context = {
  db: any;
}
`;

const generateHandlers = async (config: PonderConfig) => {
  let generatedFileCount = 0;

  fs.writeFileSync(
    `${toolConfig.pathToGeneratedDir}/common.ts`,
    common,
    "utf8"
  );
  generatedFileCount += 1;

  for (const source of config.sources) {
    const contract = new Contract(source.address, source.abi);

    const eventHandlers = Object.entries(contract.interface.events).map(
      ([eventSignature, event]) =>
        generateEventHandlerType(eventSignature, event)
    );

    const eventHandlersTypeString = eventHandlers
      .map((handler) => handler.typeString)
      .join("");

    const contractHandlersTypeString = `
    type ${source.name}Handlers = { ${eventHandlers
      .map(({ name }) => `${name}?: ${name}Handler`)
      .join(",")}}
    `;

    const exportTypeString = `
    export type { ${eventHandlers
      .map(({ name }) => `${name}Handler`)
      .join(",")},${source.name}Handlers}
    `;

    const final =
      imports +
      eventHandlersTypeString +
      contractHandlersTypeString +
      exportTypeString;

    fs.writeFileSync(
      `${toolConfig.pathToGeneratedDir}/${source.name}.ts`,
      final,
      "utf8"
    );
    generatedFileCount += 1;
  }

  return generatedFileCount;
};

// HELPERS

const generateEventHandlerType = (
  eventSignature: string,
  event: EventFragment
) => {
  const eventName = eventSignature.slice(0, eventSignature.indexOf("("));

  const parameterType = generateParamsType(event.inputs);

  const eventHandlerTypes = `
  type ${eventName}Params = ${parameterType}
  type ${eventName}Handler = (params: ${eventName}Params, context: Context) => void;
  `;

  return {
    name: eventName,
    typeString: eventHandlerTypes,
  };
};

const valueTypeMap: { [baseType: string]: string | undefined } = {
  bool: "boolean",
  address: "string",
  string: "string",
  int: "BigNumber",
  uint: "BigNumber",
  bytes: "Bytes",
};

const generateParamsType = (params: ParamType[]): string => {
  const childTypes = params
    .map((param) => {
      if (param.components) {
        return `${param.name}: ${generateParamsType(param.components)}; `;
      }

      // Remove any trailing numbers (uint256 -> uint)
      const trimmedParamBaseType = param.baseType.replace(/[0-9]+$/, "");
      const valueType = valueTypeMap[trimmedParamBaseType];
      if (valueType) {
        return `${param.name}: ${valueType}; `;
      }

      console.error("unhandled param:", { param });
      return `${param.name}: unknown; `;
    })
    .join("");

  return `{ ${childTypes}}`;
};

export { generateHandlers };
