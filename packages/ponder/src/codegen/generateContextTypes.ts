import { writeFileSync } from "node:fs";
import path from "node:path";

import { logger } from "@/common/logger";
import { OPTIONS } from "@/common/options";
import { PonderSchema } from "@/schema/types";
import { Source } from "@/sources/base";

import { formatPrettier } from "./utils";

export const generateContextTypes = (
  sources: Source[],
  schema?: PonderSchema
) => {
  const contractNames = sources.map((source) => source.name);
  const entityNames = (schema?.entities || []).map((entity) => entity.name);

  const raw = `/* Autogenerated file. Do not edit manually. */

import type { ${contractNames.join(", ")} } from "./contracts";
import type { ${entityNames.join(", ")} } from "./entities";

export type Context = {
  contracts: {
    ${contractNames.map((name) => `${name}: ${name};`).join("")}
  },
  entities: {
    ${entityNames.map((name) => `${name}: ${name};`).join("")}
  },
}
  `;

  const final = formatPrettier(raw);

  writeFileSync(
    path.join(OPTIONS.GENERATED_DIR_PATH, "context.d.ts"),
    final,
    "utf8"
  );

  logger.debug(`Generated context.d.ts file`);
};
