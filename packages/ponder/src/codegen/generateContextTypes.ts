import { writeFile } from "node:fs/promises";
import path from "node:path";

import { CONFIG } from "@/config";
import { FieldKind, PonderConfig, Schema, SourceKind } from "@/types";
import { formatPrettier, logger } from "@/utils";

const header = `
/* Autogenerated file. Do not edit manually. */
`;

const generateContextTypes = async (config: PonderConfig, schema: Schema) => {
  const entities = Object.values(schema.entities);
  const entityNames = entities.map((entity) => entity.name);
  const contractNames = config.sources
    .filter((source) => source.kind === SourceKind.EVM)
    .map((source) => source.name);

  const imports = `  
  import type { ${contractNames.join(", ")} } from "./typechain";
  `;

  const entityModelTypes = entities
    .map((entity) => {
      return `
  export type ${entity.name}Instance = {
    ${entity.fields
      .map((field) => {
        switch (field.kind) {
          case FieldKind.ID:
            return `${field.name}: ${field.tsType};`;
          case FieldKind.ENUM:
            return `${field.name}${field.notNull ? "" : "?"}: ${field.enumValues
              .map((val) => `"${val}"`)
              .join(" | ")};`;
          case FieldKind.SCALAR:
            return `${field.name}${field.notNull ? "" : "?"}: ${field.tsType};`;
        }
      })
      .join("")}
  };

  export type ${entity.name}Model = {
    get: (id: string) => Promise<${entity.name}Instance | null>;
    insert: (obj: { id: string } & Partial<${entity.name}Instance>) =>
      Promise<${entity.name}Instance>;
    upsert: (obj: { id: string } & Partial<${entity.name}Instance>) =>
      Promise<${entity.name}Instance>;
    delete: (id: string) => Promise<void>;
  };
    `;
    })
    .join("");

  const contractTypes = contractNames
    .map((contractName) => `${contractName}: ${contractName};`)
    .join("");

  const body = `

  ${entityModelTypes}

  export type Context = {
    entities: {
      ${entityNames
        .map((entityName) => `${entityName}: ${entityName}Model;`)
        .join("")}
    }
    contracts: {
      ${contractTypes}
    }
  }
  `;

  const final = formatPrettier(header + imports + body);

  await writeFile(
    path.join(CONFIG.GENERATED_DIR_PATH, "context.d.ts"),
    final,
    "utf8"
  );

  logger.info(`\x1b[36m${"GENERATED CONTEXT TYPES"}\x1b[0m`); // magenta
};

export { generateContextTypes };
