import { writeFileSync } from "node:fs";
import path from "node:path";

import { logger } from "@/common/logger";
import { OPTIONS } from "@/common/options";
import { Source } from "@/sources/base";

import { formatPrettier } from "./utils";

export const generateContextTypes = (
  sources: Source[],
  pluginHandlerContext: Record<string, unknown>
) => {
  const contractNames = sources.map((source) => source.name);

  const raw = `
    /* Autogenerated file. Do not edit manually. */

    import type { ${contractNames.join(", ")} } from "./contracts";

    ${Object.keys(pluginHandlerContext).map(
      (c) => `import type { ${c} } from "./${c}"`
    )}

    export type Context = {
      contracts: {
        ${contractNames
          .map((contractName) => `${contractName}: ${contractName};`)
          .join("")}
      },
      ${Object.keys(pluginHandlerContext).map((c) => `${c}: ${c},`)}
    }
  `;

  const final = formatPrettier(raw);

  writeFileSync(
    path.join(OPTIONS.GENERATED_DIR_PATH, "context.d.ts"),
    final,
    "utf8"
  );

  logger.debug(`Generated context.d.ts file`);
};
