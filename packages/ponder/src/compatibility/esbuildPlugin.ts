import { graphTsStaticString } from "@ponder/graph-ts-ponder";
import type { Plugin } from "esbuild";

// This is an esbuild plugin that intercepts imports from @graphprotocol/graph-ts and replaces
// them with a module generated by @ponder/graph-ts-ponder, where the host interface is implemented
// in Typescript instead of defined as namespaces to be filled in by the Graph Node runtime.
const graphTsOverridePlugin: Plugin = {
  name: "inject-graph-ts-ponder",
  setup(build) {
    // Tag imports from "@graphprotocol/graph-ts" with the "graph-ts-ponder-ns" namespace.
    build.onResolve({ filter: /^@graphprotocol\/graph-ts$/ }, async (args) => {
      return { path: args.path, namespace: "graph-ts-ponder-ns" };
    });

    // When loading imports from the "graph-ts-ponder-ns" namespace,
    // inject the dynamic module generated from @ponder/graph-ts-ponder.
    build.onLoad(
      { filter: /.*/, namespace: "graph-ts-ponder-ns" },
      async () => {
        // TODO: Update this to call a function that accept arguments
        // to help it generate code for dynamic classes (the `ethereum` and `store` classes).
        // It should still return the customized module as a string.
        const staticGraphTs = graphTsStaticString;

        return {
          contents: staticGraphTs,
          loader: "js",
        };
      }
    );
  },
};

export { graphTsOverridePlugin };
